tags:
  development: false
# AWS service account configuration
serviceAccount:
  create: false
  labels:
    app.kubernetes.io/name: "aws-efs-csi-driver"
  annotations:
    eks.amazonaws.com/role-arn: "someRoleArn"
  automountServiceAccountToken: false
# AWS secrets manager ARN configurations
secret:
  arn: ""
  license:
    arn: ""
  rds:
    arn: ""
# postgresql configuration
postgresql:
  enabled: false
  fullnameOverride: "postgresql"
  persistence:
    existingPersistentVolumeName:
    existingPersistentVolumeClaimName:
    persistentVolumeName: "postgres-pv"
    persistentVolumeClaimName: "postgres-pvc"
    persistentVolumeRetainPolicy: "keep"
    persistentVolumeClaimRetainPolicy: "keep"
    size: "1Gi"
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
    csi:
      driver: "efs.csi.aws.com"
      fsType: ""
      volumeHandle:
    nfs:
      server:
      path: "/"
    hostPath:
      path: "/mnt/postgres"
      type: DirectoryOrCreate
  auth:
    database: "iq-server"
    postgresPassword: "admin123"
  primary:
    persistence:
      existingClaim: "postgres-pvc"
    containerSecurityContext: 
      runAsUser: 1000
      enabled: true
    podSecurityContext: 
      fsGroup: 1000
      enabled: true
  volumePermissions:
    enabled: true
# Nexus IQ Server configuration
iq_server:
  image: "sonatype/nexus-iq-server"
  imagePullPolicy: "IfNotPresent"
  tag: "1.151.0"
  serviceType: "ClusterIP"
  serviceAccountName: "default"
  persistence:
    existingPersistentVolumeName:
    existingPersistentVolumeClaimName:
    persistentVolumeName: "iq-server-pv"
    persistentVolumeClaimName: "iq-server-pvc"
    persistentVolumeRetainPolicy: "keep"
    persistentVolumeClaimRetainPolicy: "keep"
    size: "1Gi"
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
    csi:
      driver:
      fsType:
      volumeHandle:
    nfs:
      server:
      path: "/"
    hostPath:
      path: "/mnt/iq-server"
      type: DirectoryOrCreate
  licenseSecret: ""
  license: ""
  database:
    hostname: "postgresql"
    port: 5432
    name: "iq-server"
    username: "postgres"
    password: "admin123"
    passwordSecret: ""
  replicas: 2
  initialAdminPasswordSecret: ""
  initialAdminPassword: "admin123"
  # Sidecar forwarder
  fluentd:
    forwarder:
      enabled: true
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 15
    timeoutSeconds: 5
    failureThreshold: 4
  livenessProbe:
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 3
    failureThreshold: 3
  config:
    sonatypeWork: "/sonatype-work/clm-server"
    clusterDirectory: "/sonatype-work/clm-cluster"
    database:
      type: "postgresql"
      hostname: ${NXIQ_DATABASE_HOSTNAME}
      port: ${NXIQ_DATABASE_PORT}
      name: ${NXIQ_DATABASE_NAME}
      username: ${NXIQ_DATABASE_USERNAME}
      password: ${NXIQ_DATABASE_PASSWORD}
    licenseFile: ${NXIQ_LICENSE_FILE}
    server:
      applicationContextPath: /
      applicationConnectors:
        - type: http
          port: 8070
      adminContextPath: /
      adminConnectors:
        - type: http
          port: 8071
      requestLog:
        appenders:
          - type: console
            logFormat: "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\""
          - type: file
            currentLogFilename: "/var/log/nexus-iq-server/request.log"
            logFormat: "%clientHost %l %user [%date] \"%requestURL\" %statusCode %bytesSent %elapsedTime \"%header{User-Agent}\""
            archivedLogFilenamePattern: "/var/log/nexus-iq-server/request-%d.log.gz"
            archivedFileCount: 50
    logging:
      level: DEBUG
      loggers:
        "com.sonatype.insight.scan": INFO
        "eu.medsea.mimeutil.MimeUtil2": INFO
        "org.apache.http": INFO
        "org.apache.http.wire": ERROR
        "org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter": INFO
        "org.eclipse.birt.report.engine.layout.pdf.font.FontConfigReader": WARN
        "org.eclipse.jetty": INFO
        "org.postgresql.jdbc.PgConnection": INFO
        "org.quartz": INFO
        "org.zeroturnaround.exec": INFO
        "com.networknt.schema": OFF
        "com.sonatype.insight.audit":
          appenders:
            - type: console
            - type: file
              currentLogFilename: "/var/log/nexus-iq-server/audit.log"
              archivedLogFilenamePattern: "/var/log/nexus-iq-server/audit-%d.log.gz"
              archivedFileCount: 50
        "com.sonatype.insight.policy.violation":
          appenders:
            - type: console
            - type: file
              currentLogFilename: "/var/log/nexus-iq-server/policy-violation.log"
              archivedLogFilenamePattern: "/var/log/nexus-iq-server/policy-violation-%d.log.gz"
              archivedFileCount: 50
      appenders:
        - type: console
          threshold: ALL
          logFormat: "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n"
        - type: file
          threshold: ALL
          logFormat: "%d{'yyyy-MM-dd HH:mm:ss,SSSZ'} %level [%thread] %X{username} %logger - %msg%n"
          currentLogFilename: "/var/log/nexus-iq-server/clm-server.log"
          archivedLogFilenamePattern: "/var/log/nexus-iq-server/clm-server-%d.log.gz"
          archivedFileCount: 50
    createSampleData: true
# ingress configuration
ingress:
  enabled: false
  ingressClassName: nginx
  pathType: Prefix
  annotations:
  # Optional parameter to set the application hostname
  hostApplication:
  # Optional parameter to set the application path
  hostApplicationPath:
  # Optional parameter to set the admin hostname
  hostAdmin:
  # Optional parameter to set the admin path
  hostAdminPath:

  # Optional parameters to set the certificate/key pair either by a secretName or directly for tls
  # If not set, then nginx will use a default self-signed certificate
  tls:
    #- secretName:
    #  certificate:
    #  key:
    #  hosts:
ingress-nginx:
  enabled: false
  controller:
    config:
      proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
      proxy-body-size: "0"
    extraArgs:
      default-ssl-certificate: "$(POD_NAMESPACE)/$(INGRESS_SECRET_NAME)"
    extraEnvs:
      - name: INGRESS_SECRET_NAME
        valueFrom:
          configMapKeyRef:
            name: ingress-configmap
            key: INGRESS_SECRET_NAME
cloudwatch:
  enabled: false
  region:
  logGroupName:
  logStreamName:
# fluentd configuration
fluentd:
  enabled: true
  config:
    sidecar_forwarder:
      # Ignore fluentd own events
      - match:
          $tag: fluent.**
          $type: "null"
      # HTTP input for the liveness and readiness probes
      - source:
          $type: http
          port: 9880
      # Throw the healthcheck to the standard output instead of forwarding it
      - match:
          $tag: fluent.healthcheck
          $type: stdout
      # Get the request log
      - source:
          $type: tail
          path: /var/log/nexus-iq-server/request.log
          pos_file: /opt/bitnami/fluentd/logs/buffers/request.pos
          tag: iq_server.request
          read_from_head: true
          parse:
            $type: regexp
            expression: /^(?<host>[^ ]*) (?<ident>[^ ]*) (?<authuser>[^ ]*) \[(?<logtime>[^\]]*)\] "(?<method>[^ ]*) (?<path>[^ ]*) (?<protocol>[^"]*)" (?<status>[^ ]*) (?<bytes>[^ ]*) (?<time>[^ ]*) "(?<userAgent>[^"]*)"$/
            time_key: logtime
            time_format: "%d/%b/%Y:%H:%M:%S %z"
            types: "status:integer,bytes:integer,time:integer"
      # Get the audit log
      - source:
          $type: tail
          path: /var/log/nexus-iq-server/audit.log
          pos_file: /opt/bitnami/fluentd/logs/buffers/audit.pos
          tag: iq_server.audit
          read_from_head: true
          parse:
            $type: json
            time_type: mixed
            time_key: timestamp
            time_format: "%Y-%m-%dT%H:%M:%S.%L%z"
            time_format_fallbacks: "%Y-%m-%dT%H:%M:%S.%LZ"
      # Get the policy violation log
      - source:
          $type: tail
          path: /var/log/nexus-iq-server/policy-violation.log
          pos_file: /opt/bitnami/fluentd/logs/buffers/policy-violation.pos
          tag: iq_server.policy-violation
          read_from_head: true
          parse:
            $type: json
            time_type: mixed
            time_key: eventTimestamp
            time_format: "%Y-%m-%dT%H:%M:%S.%L%z"
            time_format_fallbacks: "%Y-%m-%dT%H:%M:%S.%LZ"
      # Get the server log
      - source:
          $type: tail
          path: /var/log/nexus-iq-server/clm-server.log
          pos_file: /opt/bitnami/fluentd/logs/buffers/clm-server.pos
          tag: iq_server.clm-server
          read_from_head: true
          parse:
            $type: regexp
            expression: /^((?<logtime>[^ ]* [^ ]*) (?<level>[^ ]*) \[(?<thread>[^\]]*)\] (?<username>[^ ]*) (?<logger>[^ ]*) - (?<message>.*))|(?<message>.*)$/
            time_key: logtime
            time_format: "%Y-%m-%d %H:%M:%S,%L%z"
      # Get the stderr log
      - source:
          $type: tail
          path: /var/log/nexus-iq-server/stderr.log
          pos_file: /opt/bitnami/fluentd/logs/buffers/stderr.pos
          tag: iq_server.stderr
          read_from_head: true
          parse:
            $type: none
      # Enrich with kubernetes metadata
      - filter:
          $tag: "**"
          $type: record_transformer
          record:
            hostname: ${HOSTNAME}
      # Forward all logs to the aggregators
      - match:
          $tag: "**"
          $type: forward
          server:
            host: "{{ .Release.Name }}-fluentd-aggregator"
            port: 24224
          buffer:
            $type: file
            path: /opt/bitnami/fluentd/logs/buffers/logs.buffer
            flush_thread_count: 2
            flush_interval: 5s
    aggregator:
      # Ignore fluentd own events
      - match:
          $tag: fluent.**
          $type: "null"
      # HTTP input for the liveness and readiness probes
      - source:
          $type: http
          port: 9880
      # Throw the healthcheck to the standard output instead of forwarding it
      - match:
          $tag: fluent.healthcheck
          $type: stdout
      # TCP input to receive logs from
      - source:
          $type: forward
          port: 24224
      # Send the aggregated request log to a file
      - match:
          $tag: "iq_server.request"
          $type: copy
          store:
            - $type: stdout
            - $type: file
              path: /opt/bitnami/fluentd/logs/nexus-iq-server/request
              append: true
              format:
                $type: json
              inject:
                time_key: time
                time_type: string
                time_format: "%Y-%m-%dT%H:%M:%S.%NZ"
                tag_key: fluentd_tag
              buffer:
                $type: file
                path: /opt/bitnami/fluentd/logs/buffers/request.buffer
                flush_mode: interval
                flush_thread_count: 2
                flush_interval: 5s
            - $type: "{{- if ((.Values.cloudwatch).enabled) }}cloudwatch_logs{{- else }}null{{- end }}"
              log_group_name: ${LOG_GROUP_NAME}
              log_stream_name: ${LOG_STREAM_NAME}
              auto_create_stream: true
              auto_create_group: true
              remove_log_stream_name_key: true
              region: ${REGION}
      # Send the aggregated audit log to a file
      - match:
          $tag: "iq_server.audit"
          $type: copy
          store:
            - $type: stdout
            - $type: file
              path: /opt/bitnami/fluentd/logs/nexus-iq-server/audit
              append: true
              format:
                $type: json
              inject:
                time_key: time
                time_type: string
                time_format: "%Y-%m-%dT%H:%M:%S.%NZ"
                tag_key: fluentd_tag
              buffer:
                $type: file
                path: /opt/bitnami/fluentd/logs/buffers/audit.buffer
                flush_mode: interval
                flush_thread_count: 2
                flush_interval: 5s
            - $type: "{{- if ((.Values.cloudwatch).enabled) }}cloudwatch_logs{{- else }}null{{- end }}"
              log_group_name: ${LOG_GROUP_NAME}
              log_stream_name: ${LOG_STREAM_NAME}
              auto_create_stream: true
              auto_create_group: true
              remove_log_stream_name_key: true
              region: ${REGION}
      # Send the aggregated policy violation log to a file
      - match:
          $tag: "iq_server.policy-violation"
          $type: copy
          store:
            - $type: stdout
            - $type: file
              path: /opt/bitnami/fluentd/logs/nexus-iq-server/policy-violation
              append: true
              format:
                $type: json
              inject:
                time_key: time
                time_type: string
                time_format: "%Y-%m-%dT%H:%M:%S.%NZ"
                tag_key: fluentd_tag
              buffer:
                $type: file
                path: /opt/bitnami/fluentd/logs/buffers/policy-violation.buffer
                flush_mode: interval
                flush_thread_count: 2
                flush_interval: 5s
            - $type: "{{- if ((.Values.cloudwatch).enabled) }}cloudwatch_logs{{- else }}null{{- end }}"
              log_group_name: ${LOG_GROUP_NAME}
              log_stream_name: ${LOG_STREAM_NAME}
              auto_create_stream: true
              auto_create_group: true
              remove_log_stream_name_key: true
              region: ${REGION}
      # Send the aggregated server log to a file
      - match:
          $tag: "iq_server.clm-server"
          $type: copy
          store:
            - $type: stdout
            - $type: file
              path: /opt/bitnami/fluentd/logs/nexus-iq-server/clm-server
              append: true
              format:
                $type: json
              inject:
                time_key: time
                time_type: string
                time_format: "%Y-%m-%dT%H:%M:%S.%NZ"
                tag_key: fluentd_tag
              buffer:
                $type: file
                path: /opt/bitnami/fluentd/logs/buffers/clm-server.buffer
                flush_mode: interval
                flush_thread_count: 2
                flush_interval: 5s
            - $type: "{{- if ((.Values.cloudwatch).enabled) }}cloudwatch_logs{{- else }}null{{- end }}"
              log_group_name: ${LOG_GROUP_NAME}
              log_stream_name: ${LOG_STREAM_NAME}
              auto_create_stream: true
              auto_create_group: true
              remove_log_stream_name_key: true
              region: ${REGION}
      # Send the aggregated stderr log to a file
      - match:
          $tag: "iq_server.stderr"
          $type: copy
          store:
            - $type: stdout
            - $type: file
              path: /opt/bitnami/fluentd/logs/nexus-iq-server/stderr
              append: true
              format:
                $type: json
              inject:
                time_key: time
                time_type: string
                time_format: "%Y-%m-%dT%H:%M:%S.%NZ"
                tag_key: fluentd_tag
              buffer:
                $type: file
                path: /opt/bitnami/fluentd/logs/buffers/stderr.buffer
                flush_mode: interval
                flush_thread_count: 2
                flush_interval: 5s
            - $type: "{{- if ((.Values.cloudwatch).enabled) }}cloudwatch_logs{{- else }}null{{- end }}"
              log_group_name: ${LOG_GROUP_NAME}
              log_stream_name: ${LOG_STREAM_NAME}
              auto_create_stream: true
              auto_create_group: true
              remove_log_stream_name_key: true
              region: ${REGION}
  # Daemonset forwarder
  forwarder:
    enabled: false
    configFile: "fluentd.yaml"
    configMap: "{{ .Release.Name }}-fluentd-daemonset-forwarder-configmap"
  aggregator:
    enabled: true
    configFile: "fluentd.yaml"
    configMap: "{{ .Release.Name }}-fluentd-aggregator-configmap"
    extraVolumes:
      - name: "iq-server-pod-volume"
        persistentVolumeClaim:
          claimName: "iq-server-pvc"
    extraVolumeMounts:
      - name: "iq-server-pod-volume"
        mountPath: "/opt/bitnami/fluentd/logs/nexus-iq-server"
        subPath: log
    extraEnvVars:
      - name: REGION
        valueFrom:
          configMapKeyRef:
            name: cloudwatch
            key: region
            optional: true
      - name: LOG_GROUP_NAME
        valueFrom:
          configMapKeyRef:
            name: cloudwatch
            key: logGroupName
            optional: true
      - name: LOG_STREAM_NAME
        valueFrom:
          configMapKeyRef:
            name: cloudwatch
            key: logStreamName
            optional: true
    podSecurityContext:
      enabled: true
      runAsUser: 1000
      runAsGroup: 0
      fsGroup: 0
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: true
      readOnlyRootFilesystem: false
      privileged: true
    initContainers:
      - name: "{{ .Release.Name }}-set-fluentd-persistence-ownership"
        image: busybox:1.28
        command: [ "sh", "-c", "chown -R 1000:1000 /opt/bitnami/fluentd/logs/nexus-iq-server" ]
        volumeMounts:
          - mountPath: "/opt/bitnami/fluentd/logs/nexus-iq-server"
            name: "iq-server-pod-volume"
            subPath: log
    initScripts:
      plugins.sh: "fluent-gem install fluent-plugin-cloudwatch-logs"
